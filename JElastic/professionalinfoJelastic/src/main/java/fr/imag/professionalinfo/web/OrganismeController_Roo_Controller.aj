// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.imag.professionalinfo.web;

import fr.imag.professionalinfo.domain.Organisme;
import fr.imag.professionalinfo.web.OrganismeController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect OrganismeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String OrganismeController.create(@Valid Organisme organisme, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, organisme);
            return "organismes/create";
        }
        uiModel.asMap().clear();
        organisme.persist();
        return "redirect:/organismes/" + encodeUrlPathSegment(organisme.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String OrganismeController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Organisme());
        return "organismes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String OrganismeController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("organisme", Organisme.findOrganisme(id));
        uiModel.addAttribute("itemId", id);
        return "organismes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String OrganismeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("organismes", Organisme.findOrganismeEntries(firstResult, sizeNo));
            float nrOfPages = (float) Organisme.countOrganismes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("organismes", Organisme.findAllOrganismes());
        }
        return "organismes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String OrganismeController.update(@Valid Organisme organisme, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, organisme);
            return "organismes/update";
        }
        uiModel.asMap().clear();
        organisme.merge();
        return "redirect:/organismes/" + encodeUrlPathSegment(organisme.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String OrganismeController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Organisme.findOrganisme(id));
        return "organismes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String OrganismeController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Organisme organisme = Organisme.findOrganisme(id);
        organisme.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/organismes";
    }
    
    void OrganismeController.populateEditForm(Model uiModel, Organisme organisme) {
        uiModel.addAttribute("organisme", organisme);
    }
    
    String OrganismeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
