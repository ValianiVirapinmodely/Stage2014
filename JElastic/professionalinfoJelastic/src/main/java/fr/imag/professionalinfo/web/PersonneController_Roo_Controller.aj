// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.imag.professionalinfo.web;

import fr.imag.professionalinfo.domain.Brevet;
import fr.imag.professionalinfo.domain.Certification;
import fr.imag.professionalinfo.domain.Competence;
import fr.imag.professionalinfo.domain.CompteTwitter;
import fr.imag.professionalinfo.domain.Cours;
import fr.imag.professionalinfo.domain.Education;
import fr.imag.professionalinfo.domain.ExperienceVolontaire;
import fr.imag.professionalinfo.domain.Langage;
import fr.imag.professionalinfo.domain.MessagerieInstantaneeLiee;
import fr.imag.professionalinfo.domain.Personne;
import fr.imag.professionalinfo.domain.Position_;
import fr.imag.professionalinfo.domain.Publication;
import fr.imag.professionalinfo.domain.Telephone;
import fr.imag.professionalinfo.web.PersonneController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersonneController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersonneController.create(@Valid Personne personne, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personne);
            return "personnes/create";
        }
        uiModel.asMap().clear();
        personne.persist();
        return "redirect:/personnes/" + encodeUrlPathSegment(personne.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersonneController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Personne());
        return "personnes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PersonneController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personne", Personne.findPersonne(id));
        uiModel.addAttribute("itemId", id);
        return "personnes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersonneController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("personnes", Personne.findPersonneEntries(firstResult, sizeNo));
            float nrOfPages = (float) Personne.countPersonnes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("personnes", Personne.findAllPersonnes());
        }
        addDateTimeFormatPatterns(uiModel);
        return "personnes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersonneController.update(@Valid Personne personne, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personne);
            return "personnes/update";
        }
        uiModel.asMap().clear();
        personne.merge();
        return "redirect:/personnes/" + encodeUrlPathSegment(personne.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PersonneController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Personne.findPersonne(id));
        return "personnes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersonneController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Personne personne = Personne.findPersonne(id);
        personne.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/personnes";
    }
    
    void PersonneController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("personne_datedenaissance_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PersonneController.populateEditForm(Model uiModel, Personne personne) {
        uiModel.addAttribute("personne", personne);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("brevets", Brevet.findAllBrevets());
        uiModel.addAttribute("certifications", Certification.findAllCertifications());
        uiModel.addAttribute("competences", Competence.findAllCompetences());
        uiModel.addAttribute("comptetwitters", CompteTwitter.findAllCompteTwitters());
        uiModel.addAttribute("courses", Cours.findAllCourses());
        uiModel.addAttribute("educations", Education.findAllEducations());
        uiModel.addAttribute("experiencevolontaires", ExperienceVolontaire.findAllExperienceVolontaires());
        uiModel.addAttribute("langages", Langage.findAllLangages());
        uiModel.addAttribute("messagerieinstantaneeliees", MessagerieInstantaneeLiee.findAllMessagerieInstantaneeLiees());
        uiModel.addAttribute("personnes", Personne.findAllPersonnes());
        uiModel.addAttribute("position_s", Position_.findAllPosition_s());
        uiModel.addAttribute("publications", Publication.findAllPublications());
        uiModel.addAttribute("telephones", Telephone.findAllTelephones());
    }
    
    String PersonneController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
